import smtplib
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from datetime import datetime
from typing import Dict, List, Optional
import json
import os

from config.config import EMAIL_CONFIG

logger = logging.getLogger(__name__)

class EmailSender:
    def __init__(self, config: Dict = None):
        self.config = config or EMAIL_CONFIG

    def send_analysis_email(self, analysis_result: Dict) -> bool:
        """ÂèëÈÄÅÂàÜÊûêÁªìÊûúÈÇÆ‰ª∂"""
        try:
            # ÁîüÊàêÈÇÆ‰ª∂ÂÜÖÂÆπ
            subject = self._generate_email_subject(analysis_result)
            html_content = self._generate_html_content(analysis_result)

            # ÂèëÈÄÅÈÇÆ‰ª∂
            return self._send_email(subject, html_content)

        except Exception as e:
            logger.error(f"ÂèëÈÄÅÂàÜÊûêÈÇÆ‰ª∂Â§±Ë¥•: {e}")
            return False

    def _generate_email_subject(self, analysis_result: Dict) -> str:
        """ÁîüÊàêÈÇÆ‰ª∂‰∏ªÈ¢ò"""
        try:
            date = analysis_result.get('analysis_date', datetime.now().strftime('%Y-%m-%d'))
            selected_count = len(analysis_result.get('selected_stocks', []))
            market_sentiment = analysis_result.get('summary', {}).get('market_sentiment', 'Êú™Áü•')

            subject = f"„ÄêËÇ°Á•®ÂàÜÊûê„Äë{date} Êé®Ëçê{selected_count}Âè™ËÇ°Á•® Â∏ÇÂú∫ÊÉÖÁª™:{market_sentiment}"
            return subject

        except Exception as e:
            logger.error(f"ÁîüÊàêÈÇÆ‰ª∂‰∏ªÈ¢òÂ§±Ë¥•: {e}")
            return f"ËÇ°Á•®ÂàÜÊûêÊä•Âëä - {datetime.now().strftime('%Y-%m-%d')}"

    def _generate_html_content(self, analysis_result: Dict) -> str:
        """ÁîüÊàêHTMLÈÇÆ‰ª∂ÂÜÖÂÆπ - ËØ¶ÁªÜÁâà"""
        try:
            selected_stocks = analysis_result.get('selected_stocks', [])
            market_overview = analysis_result.get('market_overview', {})
            summary = analysis_result.get('summary', {})
            total_analyzed = analysis_result.get('total_analyzed', 300)
            selection_criteria = analysis_result.get('selection_criteria', {})

            # ËÆ°ÁÆóÁ≠õÈÄâÈÄöËøáÁéá
            filter_rate = (len(selected_stocks) / total_analyzed * 100) if total_analyzed > 0 else 0

            # Ëé∑ÂèñÂ∏ÇÂú∫ÊÉÖÁª™Ê†áÁ≠æ
            market_sentiment = summary.get('market_sentiment', 'Êú™Áü•')
            sentiment_badge_class = self._get_sentiment_badge_class(market_sentiment)

            html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>Ê≤™Ê∑±300ÈáèÂåñÂàÜÊûêÊä•Âëä</title>
                <style>
                    body {{
                        font-family: 'Microsoft YaHei', Arial, sans-serif;
                        line-height: 1.8;
                        margin: 0;
                        padding: 20px;
                        background-color: #f5f5f5;
                    }}
                    .container {{
                        max-width: 900px;
                        margin: 0 auto;
                        background-color: white;
                        padding: 30px;
                        border-radius: 10px;
                        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    }}
                    .header {{
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        padding: 30px;
                        border-radius: 8px;
                        margin-bottom: 30px;
                    }}
                    .header h1 {{ margin: 0 0 10px 0; font-size: 28px; }}
                    .header p {{ margin: 5px 0; opacity: 0.95; }}

                    .section {{
                        margin: 25px 0;
                        padding: 20px;
                        border-radius: 8px;
                        border-left: 4px solid #667eea;
                    }}
                    .summary {{ background-color: #e8f5e9; border-left-color: #4caf50; }}
                    .stocks {{ background-color: #fff3e0; border-left-color: #ff9800; }}
                    .performance {{ background-color: #e3f2fd; border-left-color: #2196f3; }}
                    .warning {{ background-color: #ffebee; border-left-color: #f44336; }}
                    .analysis {{ background-color: #f3e5f5; border-left-color: #9c27b0; }}
                    .market {{ background-color: #e0f2f1; border-left-color: #009688; }}

                    h2 {{
                        color: #333;
                        font-size: 22px;
                        margin-top: 0;
                        border-bottom: 2px solid #eee;
                        padding-bottom: 10px;
                    }}
                    h3 {{ color: #555; font-size: 18px; margin-top: 20px; }}

                    table {{
                        border-collapse: collapse;
                        width: 100%;
                        margin: 20px 0;
                        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                    }}
                    th, td {{
                        border: 1px solid #ddd;
                        padding: 12px 8px;
                        text-align: center;
                    }}
                    th {{
                        background: linear-gradient(to bottom, #f8f8f8, #e8e8e8);
                        font-weight: bold;
                        color: #333;
                    }}
                    tr:hover {{ background-color: #f5f5f5; }}

                    .highlight {{ color: #d32f2f; font-weight: bold; font-size: 18px; }}
                    .positive {{ color: #d32f2f; font-weight: bold; }}
                    .negative {{ color: #388e3c; font-weight: bold; }}
                    .neutral {{ color: #757575; }}
                    .excellent {{ color: #1565c0; font-weight: bold; }}
                    .good {{ color: #388e3c; font-weight: bold; }}

                    .stock-card {{
                        background: white;
                        border: 2px solid #ff9800;
                        border-radius: 8px;
                        padding: 20px;
                        margin: 15px 0;
                        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                    }}
                    .stock-card h3 {{
                        color: #ff9800;
                        margin-top: 0;
                        border-bottom: none;
                    }}
                    .stock-info {{
                        display: grid;
                        grid-template-columns: repeat(2, 1fr);
                        gap: 10px;
                        margin: 15px 0;
                    }}
                    .stock-info-item {{
                        padding: 8px;
                        background: #f9f9f9;
                        border-radius: 4px;
                    }}
                    .stock-info-label {{
                        color: #666;
                        font-size: 13px;
                    }}
                    .stock-info-value {{
                        color: #333;
                        font-weight: bold;
                        font-size: 16px;
                    }}

                    ul {{
                        list-style: none;
                        padding-left: 0;
                    }}
                    ul li {{
                        padding: 8px 0;
                        padding-left: 25px;
                        position: relative;
                    }}
                    ul li:before {{
                        content: "‚ñ∏";
                        position: absolute;
                        left: 0;
                        color: #667eea;
                        font-weight: bold;
                    }}

                    .metric-grid {{
                        display: grid;
                        grid-template-columns: repeat(2, 1fr);
                        gap: 15px;
                        margin: 20px 0;
                    }}
                    .metric-card {{
                        background: #f9f9f9;
                        padding: 15px;
                        border-radius: 8px;
                        text-align: center;
                    }}
                    .metric-label {{ color: #666; font-size: 14px; }}
                    .metric-value {{
                        color: #333;
                        font-size: 24px;
                        font-weight: bold;
                        margin: 10px 0;
                    }}

                    .footer {{
                        margin-top: 40px;
                        padding-top: 20px;
                        border-top: 2px solid #eee;
                        text-align: center;
                        color: #999;
                        font-size: 13px;
                    }}

                    .badge {{
                        display: inline-block;
                        padding: 4px 12px;
                        border-radius: 12px;
                        font-size: 12px;
                        font-weight: bold;
                        margin-left: 10px;
                    }}
                    .badge-success {{ background: #4caf50; color: white; }}
                    .badge-warning {{ background: #ff9800; color: white; }}
                    .badge-danger {{ background: #f44336; color: white; }}
                    .badge-info {{ background: #2196f3; color: white; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üìä Ê≤™Ê∑±300ÈáèÂåñÂàÜÊûêÊä•Âëä</h1>
                        <p><strong>ÂàÜÊûêÊó•Êúü:</strong> {analysis_result.get('analysis_date', 'Êú™Áü•')} <span class="badge {sentiment_badge_class}">{market_sentiment}</span></p>
                        <p><strong>ÁîüÊàêÊó∂Èó¥:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                        <p><strong>Êï∞ÊçÆËåÉÂõ¥:</strong> Ê≤™Ê∑±300ÊàêÂàÜËÇ°Ôºà{total_analyzed}Âè™Ôºâ</p>
                        <p><strong>Á≠õÈÄâÈÄöËøá:</strong> {len(selected_stocks)}Âè™ËÇ°Á•®ÔºàÁ≠õÈÄâÁéá{filter_rate:.2f}%Ôºâ</p>
                    </div>

                    <div class="section summary">
                        <h2>üîç ÂàÜÊûêÊ¶ÇÂÜµ</h2>
                        <div class="metric-grid">
                            <div class="metric-card">
                                <div class="metric-label">Êï∞ÊçÆÊàêÂäüÁéá</div>
                                <div class="metric-value positive">100%</div>
                            </div>
                            <div class="metric-card">
                                <div class="metric-label">Á≠õÈÄâÈÄöËøáÁéá</div>
                                <div class="metric-value {'positive' if filter_rate > 1 else 'negative'}">{filter_rate:.2f}%</div>
                            </div>
                            <div class="metric-card">
                                <div class="metric-label">ÁõÆÊ†áËÇ°Á•®Êï∞</div>
                                <div class="metric-value">{total_analyzed}Âè™</div>
                            </div>
                            <div class="metric-card">
                                <div class="metric-label">ÊàêÂäüËé∑Âèñ</div>
                                <div class="metric-value positive">{total_analyzed}Âè™</div>
                            </div>
                        </div>
                        <ul>
                            <li><strong>Êï∞ÊçÆÊ∫ê:</strong> ËÖæËÆØË¥¢ÁªèÂÆûÊó∂API</li>
                            <li><strong>Á≠õÈÄâÊù°‰ª∂:</strong> PE > 0 ‰∏î PE ‚â§ {selection_criteria.get('max_pe_ratio', 30)}</li>
                            <li><strong>Êàê‰∫§È¢ùË¶ÅÊ±Ç:</strong> ‚â• {selection_criteria.get('min_turnover', 5000)}‰∏áÂÖÉ</li>
                            <li><strong>Âº∫ÂäøÂàÜÊï∞:</strong> ‚â• {selection_criteria.get('min_strength_score', 40)}ÂàÜ</li>
                        </ul>
                    </div>
            """

            # Êé®ËçêËÇ°Á•®
            if selected_stocks:
                html += """
                    <div class="section stocks">
                        <h2>üèÜ Á≤æÈÄâËÇ°Á•®</h2>
                """

                for stock in selected_stocks:
                    rank = stock.get('rank', 0)
                    change_pct = stock.get('change_pct', 0)
                    change_class = "positive" if change_pct > 0 else "negative"
                    trend_icon = "‚Üó" if change_pct > 0 else "‚Üò" if change_pct < 0 else "‚Üí"
                    turnover = stock.get('turnover', 0)

                    html += f"""
                        <div class="stock-card">
                            <h3>#{rank} {stock.get('name', '')} ({stock.get('code', '')}) {trend_icon}</h3>
                            <div class="stock-info">
                                <div class="stock-info-item">
                                    <div class="stock-info-label">Êî∂Áõò‰ª∑</div>
                                    <div class="stock-info-value">¬•{stock.get('price', 0):.2f}</div>
                                </div>
                                <div class="stock-info-item">
                                    <div class="stock-info-label">Ê∂®Ë∑åÂπÖ</div>
                                    <div class="stock-info-value {change_class}">{change_pct:+.2f}%</div>
                                </div>
                                <div class="stock-info-item">
                                    <div class="stock-info-label">PEÂ∏ÇÁõàÁéá</div>
                                    <div class="stock-info-value">{stock.get('pe_ratio', 0):.2f}ÂÄç</div>
                                </div>
                                <div class="stock-info-item">
                                    <div class="stock-info-label">Âº∫ÂäøËØÑÂàÜ</div>
                                    <div class="stock-info-value">{stock.get('strength_score', 0):.0f}ÂàÜ</div>
                                </div>
                                <div class="stock-info-item">
                                    <div class="stock-info-label">Êàê‰∫§È¢ù</div>
                                    <div class="stock-info-value">{turnover:.0f}‰∏áÂÖÉ</div>
                                </div>
                                <div class="stock-info-item">
                                    <div class="stock-info-label">20Êó•Âä®Èáè</div>
                                    <div class="stock-info-value">{stock.get('momentum_20d', 0):+.2f}%</div>
                                </div>
                            </div>
                            <p><strong>ÈÄâÊã©ÁêÜÁî±:</strong> {stock.get('selection_reason', 'Á¨¶ÂêàÁ≠õÈÄâÊù°‰ª∂')}</p>
                        </div>
                    """

                # ËÇ°Á•®Ê±áÊÄªË°®Ê†º
                html += """
                        <table>
                            <tr>
                                <th>ÊéíÂêç</th>
                                <th>ËÇ°Á•®ÂêçÁß∞</th>
                                <th>‰ª£Á†Å</th>
                                <th>PE</th>
                                <th>ROE</th>
                                <th>Ê∂®Ë∑åÂπÖ</th>
                                <th>ËØÑÂàÜ</th>
                                <th>ËØÑÁ∫ß</th>
                                <th>ÊäÄÊúØÈù¢</th>
                                <th>‰º∞ÂÄº</th>
                                <th>ÁõàÂà©</th>
                                <th>ÂÆâÂÖ®</th>
                                <th>ËÇ°ÊÅØ</th>
                                <th>Êàê‰∫§È¢ù(‰∏á)</th>
                            </tr>
                """

                for stock in selected_stocks:
                    change_pct = stock.get('change_pct', 0)
                    change_class = "positive" if change_pct > 0 else "negative" if change_pct < 0 else "neutral"
                    turnover = stock.get('turnover', 0)
                    turnover_mark = " ‚≠ê" if turnover > 10000 else ""
                    roe = stock.get('roe', 0)
                    roe_display = f"{roe:.1f}%" if roe else "-"
                    roe_class = "excellent" if roe and roe > 20 else "good" if roe and roe > 15 else ""
                    grade = stock.get('strength_grade', '-')
                    
                    # Ëé∑ÂèñÂàÜÈ°πÂæóÂàÜ
                    score_detail = stock.get('strength_score_detail', {})
                    tech_score = 0
                    val_score = 0
                    prof_score = 0
                    safe_score = 0
                    div_score = 0
                    if score_detail:
                        breakdown = score_detail.get('breakdown', {})
                        tech_score = breakdown.get('technical', 0)
                        val_score = breakdown.get('valuation', 0)
                        prof_score = breakdown.get('profitability', 0)
                        safe_score = breakdown.get('safety', 0)
                        div_score = breakdown.get('dividend', 0)

                    html += f"""
                            <tr>
                                <td>{stock.get('rank', 0)}</td>
                                <td>{stock.get('name', '')}</td>
                                <td>{stock.get('code', '')}</td>
                                <td>{stock.get('pe_ratio', 0):.2f}</td>
                                <td class="{roe_class}">{roe_display}</td>
                                <td class="{change_class}">{change_pct:+.2f}%</td>
                                <td>{stock.get('strength_score', 0):.0f}</td>
                                <td><strong>{grade}</strong></td>
                                <td>{tech_score}</td>
                                <td>{val_score}</td>
                                <td>{prof_score}</td>
                                <td>{safe_score}</td>
                                <td>{div_score}</td>
                                <td>{turnover:.0f}{turnover_mark}</td>
                            </tr>
                    """

                html += """
                        </table>
                    </div>
                """

            # Â∏ÇÂú∫ÁªüËÆ°
            if market_overview:
                rising_ratio = market_overview.get('rising_ratio', 0)
                avg_change = market_overview.get('avg_change_pct', 0)
                avg_change_class = "positive" if avg_change > 0 else "negative"

                html += f"""
                    <div class="section market">
                        <h2>üìä Â∏ÇÂú∫ÁªüËÆ°</h2>
                        <h3>üéØ Êï¥‰ΩìË°®Áé∞</h3>
                        <div class="metric-grid">
                            <div class="metric-card">
                                <div class="metric-label">ÂÖ®Â∏ÇÂú∫ÊÄªËÇ°Á•®</div>
                                <div class="metric-value">{market_overview.get('total_stocks', 0):,}Âè™</div>
                            </div>
                            <div class="metric-card">
                                <div class="metric-label">‰∏äÊ∂®ËÇ°Á•®</div>
                                <div class="metric-value positive">{market_overview.get('rising_stocks', 0):,}Âè™ ({rising_ratio:.1f}%)</div>
                            </div>
                            <div class="metric-card">
                                <div class="metric-label">‰∏ãË∑åËÇ°Á•®</div>
                                <div class="metric-value negative">{market_overview.get('falling_stocks', 0):,}Âè™</div>
                            </div>
                            <div class="metric-card">
                                <div class="metric-label">Âπ≥ÂùáÊ∂®Ë∑åÂπÖ</div>
                                <div class="metric-value {avg_change_class}">{avg_change:+.2f}%</div>
                            </div>
                        </div>

                        <h3>üîç Â∏ÇÂú∫ÁâπÂæÅ</h3>
                        <ul>
                            <li><strong>Â∏ÇÂú∫ÊÉÖÁª™:</strong> {market_sentiment}Ôºå‰∏äÊ∂®ËÇ°Á•®Âç†ÊØî{rising_ratio:.1f}%</li>
                            <li><strong>Êï∞ÊçÆÊù•Ê∫ê:</strong> {market_overview.get('data_source', 'ÂÆûÊó∂Êï∞ÊçÆ')}</li>
                """

                # Ê†πÊçÆÂ∏ÇÂú∫ÊÉÖÂÜµÊ∑ªÂä†ÁâπÂæÅÊèèËø∞
                if rising_ratio > 60:
                    html += "<li><strong>Â∏ÇÂú∫Âº∫Âäø:</strong> Â∏ÇÂú∫Êï¥‰ΩìË°®Áé∞Âº∫Âä≤ÔºåÂ§öÊï∞ËÇ°Á•®‰∏äÊ∂®</li>"
                elif rising_ratio > 40:
                    html += "<li><strong>ÈúáËç°Êï¥ÁêÜ:</strong> Â∏ÇÂú∫Ê∂®Ë∑åÂü∫Êú¨Âπ≥Ë°°ÔºåÂ§Ñ‰∫éÈúáËç°Èò∂ÊÆµ</li>"
                else:
                    html += "<li><strong>Â∏ÇÂú∫ÂÅèÂº±:</strong> ‰∏ãË∑åËÇ°Á•®Â±ÖÂ§öÔºåÂ∏ÇÂú∫Ë∞ÉÊï¥ÂéãÂäõËæÉÂ§ß</li>"

                if len(selected_stocks) < 3:
                    html += "<li><strong>Á≠õÈÄâ‰∏•Ê†º:</strong> Á¨¶ÂêàÊù°‰ª∂ÁöÑËÇ°Á•®ËæÉÂ∞ëÔºå‰ºòË¥®Ê†áÁöÑÁ®ÄÁº∫</li>"

                html += """
                        </ul>
                    </div>
                """

            # È£éÈô©ÊèêÁ§∫
            risk_warnings = summary.get('risk_warnings', [])
            if risk_warnings:
                html += """
                    <div class="section warning">
                        <h2>‚ö†Ô∏è È£éÈô©ÊèêÁ§∫</h2>
                        <ul>
                """
                for warning in risk_warnings:
                    html += f"<li><strong>È£éÈô©Ë≠¶Âëä:</strong> {warning}</li>"

                html += """
                        </ul>
                    </div>
                """

            # Êìç‰ΩúÂª∫ËÆÆ
            html += f"""
                <div class="section analysis">
                    <h2>üí° Êìç‰ΩúÂª∫ËÆÆ</h2>
                    <ul>
            """

            # Ê†πÊçÆÂ∏ÇÂú∫ÊÉÖÂÜµÁªôÂá∫Âª∫ËÆÆ
            if market_overview:
                rising_ratio = market_overview.get('rising_ratio', 0)
                if rising_ratio > 60:
                    html += """
                        <li><strong>ÈÄÇÂ∫¶ÂèÇ‰∏é:</strong> Â∏ÇÂú∫Êï¥‰ΩìÂÅèÂº∫ÔºåÂèØÈÄÇÂΩìÂ¢ûÂä†‰ªì‰ΩçÔºå‰ΩÜÊ≥®ÊÑèËøΩÈ´òÈ£éÈô©</li>
                        <li><strong>ÂÖ≥Ê≥®ÈæôÂ§¥:</strong> ÈáçÁÇπÂÖ≥Ê≥®Âº∫ÂäøÊùøÂùóÁöÑÈæôÂ§¥ËÇ°Á•®</li>
                    """
                elif rising_ratio > 40:
                    html += """
                        <li><strong>ÊéßÂà∂‰ªì‰Ωç:</strong> Â∏ÇÂú∫ÈúáËç°ÔºåÂª∫ËÆÆ‰ªì‰Ωç‰∏çË∂ÖËøá60%</li>
                        <li><strong>ÂÖ≥Ê≥®‰Ωé‰º∞ÂÄº:</strong> ÈáçÁÇπÂÖ≥Ê≥®PE < 20ÁöÑ‰Ωé‰º∞ÂÄº‰ºòË¥®ËÇ°</li>
                    """
                else:
                    html += """
                        <li><strong>Ë∞®ÊÖéËßÇÊúõ:</strong> Â∏ÇÂú∫ÂÅèÂº±ÔºåÂª∫ËÆÆÈôç‰Ωé‰ªì‰ΩçËá≥50%‰ª•‰∏ã</li>
                        <li><strong>Èò≤ÂÆà‰∏∫‰∏ª:</strong> ‰ºòÂÖàÈÖçÁΩÆÈò≤Âæ°ÊÄßÊùøÂùó</li>
                    """

            html += f"""
                        <li><strong>ÂàÜÊï£ÊäïËµÑ:</strong> ‰∏çË¶ÅÈõÜ‰∏≠Âçï‰∏ÄÊùøÂùóÔºåÈÄÇÂ∫¶ÂàÜÊï£Èôç‰ΩéÈ£éÈô©</li>
                        <li><strong>Ê≠¢ÊçüÊ≠¢Áõà:</strong> ËÆæÁΩÆÂêàÁêÜÁöÑÊ≠¢ÊçüÊ≠¢ÁõàÁÇπ‰ΩçÔºå‰∏•Ê†ºÊâßË°å</li>
                        <li><strong>ÁÅµÊ¥ªÂ∫îÂØπ:</strong> ÂØÜÂàáÂÖ≥Ê≥®Â∏ÇÂú∫ÂèòÂåñÔºåÂèäÊó∂Ë∞ÉÊï¥Á≠ñÁï•</li>
                    </ul>
                </div>

                <div class="section summary">
                    <h2>üîß ÊäÄÊúØËØ¥Êòé</h2>
                    <h3>üìä Á≠õÈÄâÊ†áÂáÜ</h3>
                    <ul>
                        <li><strong>PEÁ≠õÈÄâ:</strong> PE &gt; 0 ‰∏î PE ‚â§ {selection_criteria.get('max_pe_ratio', 30)}</li>
                        <li><strong>Êàê‰∫§È¢ùÁ≠õÈÄâ:</strong> Êàê‰∫§È¢ù ‚â• {selection_criteria.get('min_turnover', 5000)}‰∏áÂÖÉ</li>
                        <li><strong>Âº∫ÂäøËØÑÂàÜ:</strong> ÁªºÂêàÊ∂®Ë∑åÂπÖ„ÄÅÂä®Èáè„ÄÅÊµÅÂä®ÊÄßÁ≠âÂ§öÁª¥ÊåáÊ†á</li>
                        <li><strong>Êï∞ÈáèÈôêÂà∂:</strong> ÊúÄÂ§öÊé®Ëçê{selection_criteria.get('max_stocks', 5)}Âè™ËÇ°Á•®</li>
                    </ul>

                    <h3>‚ö†Ô∏è ÈáçË¶ÅÊèêÈÜí</h3>
                    <ul>
                        <li>Êú¨ÂàÜÊûêÂü∫‰∫é{analysis_result.get('analysis_date', 'Êú™Áü•')}Ê≤™Ê∑±300ÊàêÂàÜËÇ°ÂÆûÊó∂Êï∞ÊçÆ</li>
                        <li>Ê≤™Ê∑±300ÊàêÂàÜËÇ°ÂÆöÊúüË∞ÉÊï¥ÔºåÂª∫ËÆÆÂÖ≥Ê≥®ÊúÄÊñ∞ÊàêÂàÜËÇ°ÂèòÂåñ</li>
                        <li>PEÊï∞ÊçÆ‰∏∫Âä®ÊÄÅÂ∏ÇÁõàÁéáÔºåÈúÄÂÖ≥Ê≥®ÊúÄÊñ∞Ë¥¢Êä•</li>
                        <li>Âª∫ËÆÆÁªìÂêàÂü∫Êú¨Èù¢ÂàÜÊûêÔºåÂÖ≥Ê≥®ÂÖ¨Âè∏ÁªèËê•Áä∂ÂÜµÂíåË°å‰∏öË∂ãÂäø</li>
                    </ul>
                </div>

                <div class="footer">
                    <p><em>‚ö†Ô∏è È£éÈô©ÊèêÁ§∫: ÊäïËµÑÊúâÈ£éÈô©ÔºåÂÜ≥Á≠ñÈúÄË∞®ÊÖé„ÄÇÊú¨Êä•Âëä‰ªÖ‰æõÂèÇËÄÉÔºå‰∏çÊûÑÊàêÊäïËµÑÂª∫ËÆÆ„ÄÇ</em></p>
                    <p><em>üìä Êï∞ÊçÆÊù•Ê∫ê: ËÖæËÆØË¥¢ÁªèÂÆûÊó∂APIÔºåÁ°Æ‰øùÊï∞ÊçÆÂáÜÁ°ÆÊÄß</em></p>
                    <p><em>ü§ñ Êú¨Êä•ÂëäÁî±ÈáèÂåñÂàÜÊûêÁ≥ªÁªüËá™Âä®ÁîüÊàê</em></p>
                    <hr style="margin: 20px 0; border: none; border-top: 1px solid #ddd;">
                    <p>¬© 2025 ËÇ°Á•®ÈáèÂåñÂàÜÊûêÁ≥ªÁªü | ÁîüÊàêÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                </div>
                </div>
            </body>
            </html>
            """

            return html

        except Exception as e:
            logger.error(f"ÁîüÊàêHTMLÂÜÖÂÆπÂ§±Ë¥•: {e}")
            return f"<p>ÁîüÊàêÈÇÆ‰ª∂ÂÜÖÂÆπÂ§±Ë¥•: {str(e)}</p>"

    def _get_sentiment_badge_class(self, sentiment: str) -> str:
        """Ê†πÊçÆÂ∏ÇÂú∫ÊÉÖÁª™ËøîÂõûÂØπÂ∫îÁöÑbadgeÊ†∑Âºè"""
        if sentiment in ['Âº∫Âäø‰∏äÊ∂®', 'ÂÅèÂº∫ÈúáËç°']:
            return 'badge-success'
        elif sentiment in ['ÈúáËç°Êï¥ÁêÜ']:
            return 'badge-warning'
        elif sentiment in ['ÂÅèÂº±Ë∞ÉÊï¥', 'Âº±Âäø‰∏ãË∑å']:
            return 'badge-danger'
        else:
            return 'badge-info'

    def send_analysis_email_with_attachment(self, analysis_result: Dict, report_file: str = None) -> bool:
        """ÂèëÈÄÅÂ∏¶MarkdownÈôÑ‰ª∂ÁöÑÂàÜÊûêÁªìÊûúÈÇÆ‰ª∂"""
        try:
            # ÁîüÊàêÈÇÆ‰ª∂ÂÜÖÂÆπ
            subject = self._generate_email_subject(analysis_result)
            html_content = self._generate_html_content(analysis_result)

            # Êü•ÊâæÊúÄÊñ∞ÁöÑMarkdownÊä•Âëä
            if not report_file:
                report_file = self._find_latest_report(analysis_result.get('analysis_date'))
                if report_file:
                    logger.info(f"ÊâæÂà∞Êä•ÂëäÊñá‰ª∂: {report_file}")
                else:
                    logger.warning("Êú™ÊâæÂà∞MarkdownÊä•ÂëäÊñá‰ª∂ÔºåÂ∞Ü‰∏çÈôÑÂä†ÈôÑ‰ª∂")

            # ÂèëÈÄÅÈÇÆ‰ª∂ÔºàÂ∏¶ÈôÑ‰ª∂Ôºâ
            attachments = [report_file] if report_file and os.path.exists(report_file) else None
            result = self._send_email(subject, html_content, attachments)

            if result:
                logger.info("ÈÇÆ‰ª∂ÂèëÈÄÅÊàêÂäüÔºàÂ∏¶ÈôÑ‰ª∂Ôºâ")
            else:
                logger.error("ÈÇÆ‰ª∂ÂèëÈÄÅÂ§±Ë¥•")

            return result

        except Exception as e:
            logger.error(f"ÂèëÈÄÅÂ∏¶ÈôÑ‰ª∂ÁöÑÂàÜÊûêÈÇÆ‰ª∂Â§±Ë¥•: {e}", exc_info=True)
            return False

    def _find_latest_report(self, analysis_date: str = None) -> Optional[str]:
        """Êü•ÊâæÊúÄÊñ∞ÁöÑMarkdownÊä•Âëä"""
        try:
            reports_dir = './reports'
            if not os.path.exists(reports_dir):
                return None

            # Êü•ÊâæÊä•ÂëäÊñá‰ª∂
            report_files = [f for f in os.listdir(reports_dir) if f.endswith('.md')]
            if not report_files:
                return None

            # Â¶ÇÊûúÊåáÂÆöÊó•ÊúüÔºå‰ºòÂÖàÊü•ÊâæÂØπÂ∫îÊó•ÊúüÁöÑÊä•Âëä
            if analysis_date:
                for f in report_files:
                    if analysis_date in f:
                        return os.path.join(reports_dir, f)

            # Âê¶ÂàôËøîÂõûÊúÄÊñ∞ÁöÑÊä•Âëä
            latest_file = max(report_files, key=lambda f: os.path.getmtime(os.path.join(reports_dir, f)))
            return os.path.join(reports_dir, latest_file)

        except Exception as e:
            logger.error(f"Êü•ÊâæÊä•ÂëäÊñá‰ª∂Â§±Ë¥•: {e}")
            return None

    def _send_email(self, subject: str, html_content: str, attachments: List[str] = None) -> bool:
        """ÂèëÈÄÅÈÇÆ‰ª∂"""
        try:
            # Ê£ÄÊü•ÈÖçÁΩÆ
            if not all([self.config.get('email'), self.config.get('password'), self.config.get('to_email')]):
                logger.error("ÈÇÆ‰ª∂ÈÖçÁΩÆ‰∏çÂÆåÊï¥")
                return False

            # ÂàõÂª∫ÈÇÆ‰ª∂
            msg = MIMEMultipart('alternative')
            msg['From'] = self.config['email']

            # ÊîØÊåÅÂ§ö‰∏™Êî∂‰ª∂‰∫∫
            to_emails = self.config['to_email']
            if isinstance(to_emails, str):
                to_emails = [to_emails]
            msg['To'] = ', '.join(to_emails)
            msg['Subject'] = subject

            # Ê∑ªÂä†HTMLÂÜÖÂÆπ
            html_part = MIMEText(html_content, 'html', 'utf-8')
            msg.attach(html_part)

            # Ê∑ªÂä†ÈôÑ‰ª∂
            if attachments:
                for file_path in attachments:
                    if os.path.exists(file_path):
                        logger.info(f"Ê≠£Âú®Ê∑ªÂä†ÈôÑ‰ª∂: {file_path}")
                        with open(file_path, 'rb') as attachment:
                            # Ê†πÊçÆÊñá‰ª∂Êâ©Â±ïÂêçËÆæÁΩÆMIMEÁ±ªÂûã
                            filename = os.path.basename(file_path)
                            if filename.endswith('.md'):
                                part = MIMEText(attachment.read().decode('utf-8'), 'plain', 'utf-8')
                            else:
                                part = MIMEBase('application', 'octet-stream')
                                part.set_payload(attachment.read())
                                encoders.encode_base64(part)

                            # ‰ΩøÁî®RFC2231ÁºñÁ†Å‰∏≠ÊñáÊñá‰ª∂Âêç
                            from email.header import Header
                            encoded_filename = Header(filename, 'utf-8').encode()
                            part.add_header(
                                'Content-Disposition',
                                'attachment',
                                filename=('utf-8', '', filename)
                            )
                            msg.attach(part)

            # ËøûÊé•SMTPÊúçÂä°Âô®Âπ∂ÂèëÈÄÅ
            logger.info(f"Ê≠£Âú®ËøûÊé•SMTPÊúçÂä°Âô®: {self.config['smtp_server']}:{self.config['smtp_port']}")
            server = None
            try:
                server = smtplib.SMTP(self.config['smtp_server'], self.config['smtp_port'], timeout=30)
                server.starttls()
                logger.info("Ê≠£Âú®ÁôªÂΩïÈÇÆÁÆ±...")
                server.login(self.config['email'], self.config['password'])
                logger.info("Ê≠£Âú®ÂèëÈÄÅÈÇÆ‰ª∂...")
                server.send_message(msg)
                logger.info(f"ÈÇÆ‰ª∂ÂèëÈÄÅÊàêÂäü -> {', '.join(to_emails)}")
                return True
            finally:
                # Á°Æ‰øùÊúçÂä°Âô®ËøûÊé•Ë¢´ÂÖ≥Èó≠,ÂøΩÁï•ÂÖ≥Èó≠Êó∂ÁöÑÂºÇÂ∏∏
                if server:
                    try:
                        server.quit()
                    except:
                        pass

        except smtplib.SMTPException as e:
            logger.error(f"SMTPÈîôËØØ: {e}")
            return False
        except Exception as e:
            logger.error(f"ÂèëÈÄÅÈÇÆ‰ª∂Â§±Ë¥•: {e}")
            return False

    def send_test_email(self) -> bool:
        """ÂèëÈÄÅÊµãËØïÈÇÆ‰ª∂"""
        try:
            subject = "üìß ËÇ°Á•®ÂàÜÊûêÁ≥ªÁªüÊµãËØïÈÇÆ‰ª∂"
            html_content = f"""
            <html>
            <body>
                <h2>üéâ ËÇ°Á•®ÂàÜÊûêÁ≥ªÁªüÈÇÆ‰ª∂ÂäüËÉΩÊµãËØï</h2>
                <p>Â¶ÇÊûúÊÇ®Êî∂Âà∞ËøôÂ∞ÅÈÇÆ‰ª∂ÔºåËØ¥ÊòéÈÇÆ‰ª∂ÂäüËÉΩÈÖçÁΩÆÊ≠£Á°ÆÔºÅ</p>
                <p><strong>ÂèëÈÄÅÊó∂Èó¥:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p><strong>Á≥ªÁªüÁä∂ÊÄÅ:</strong> Ê≠£Â∏∏ËøêË°å</p>
                <p><strong>‰∏ãÊ¨°ÂàÜÊûêÊó∂Èó¥:</strong> ÊØè‰∏™‰∫§ÊòìÊó•16:00</p>
                <p><strong>ÈÇÆ‰ª∂ÂèëÈÄÅÊó∂Èó¥:</strong> ÊØè‰∏™‰∫§ÊòìÊó•08:30</p>
                <hr>
                <p style="color: #666; font-size: 12px;">ËøôÊòØ‰∏ÄÂ∞ÅËá™Âä®ÂèëÈÄÅÁöÑÊµãËØïÈÇÆ‰ª∂</p>
            </body>
            </html>
            """

            return self._send_email(subject, html_content)

        except Exception as e:
            logger.error(f"ÂèëÈÄÅÊµãËØïÈÇÆ‰ª∂Â§±Ë¥•: {e}")
            return False

    def send_error_notification(self, error_message: str) -> bool:
        """ÂèëÈÄÅÈîôËØØÈÄöÁü•ÈÇÆ‰ª∂"""
        try:
            subject = "‚ùå ËÇ°Á•®ÂàÜÊûêÁ≥ªÁªüÈîôËØØÈÄöÁü•"
            html_content = f"""
            <html>
            <body>
                <h2>‚ùå Á≥ªÁªüÈîôËØØÈÄöÁü•</h2>
                <p><strong>ÈîôËØØÊó∂Èó¥:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p><strong>ÈîôËØØ‰ø°ÊÅØ:</strong> {error_message}</p>
                <p>ËØ∑Ê£ÄÊü•Á≥ªÁªüËøêË°åÁä∂ÊÄÅÂπ∂ÂèäÊó∂Â§ÑÁêÜ„ÄÇ</p>
            </body>
            </html>
            """

            return self._send_email(subject, html_content)

        except Exception as e:
            logger.error(f"ÂèëÈÄÅÈîôËØØÈÄöÁü•ÈÇÆ‰ª∂Â§±Ë¥•: {e}")
            return False